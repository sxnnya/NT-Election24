# -*- coding: utf-8 -*-
"""ElectionPerspectivesCode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/124CyRtIQuL0Hg7pECWD4XO_Qdw0VWqYI

# Data Preparation
"""

from google.colab import drive
drive.mount('/content/drive')

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/NT/NT_elections_survey.csv')

df.shape

df.columns

df_num = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/NT/NT_elections_survey.csv')

"""# Data Cleaning"""

df_num.drop(df_num[df_num['campus_affiliation'] == 'Staff member'].index, inplace=True)
df_num.drop(df_num[df_num['campus_affiliation'] == 'Faculty member'].index, inplace=True)

df_num.shape

topics = ["Abortion", "Climate change", "Economy", "Health care", "Supreme Court appointments",
          "Violent crime", "Foreign policy", "Immigration", "Gun policy", "Racial and ethnic inequality", "War/conflicts in Ukraine and Russia",
          "War/conflicts in Palestine and Israel", "Fair elections, democracy", "Other"]

for topic in topics:
    df_num[topic] = df_num['important_topics'].apply(lambda x: 1 if topic in x else 0)

df_num.rename(columns={'Abortion': 'topics_abortion'}, inplace=True)

df_num.rename(columns={'Climate change': 'topics_climate'}, inplace=True)

df_num.rename(columns={'Economy': 'topics_economy'}, inplace=True)

df_num.rename(columns={'Health care': 'topics_healthcare'}, inplace=True)

df_num.rename(columns={'Supreme Court appointments': 'topics_scotus'}, inplace=True)

df_num.rename(columns={'Violent crime': 'topics_crime'}, inplace=True)

df_num.rename(columns={'Foreign policy': 'topics_foreignpolicy'}, inplace=True)

df_num.rename(columns={'Immigration': 'topics_immigration'}, inplace=True)

df_num.rename(columns={'Gun policy': 'topics_guns'}, inplace=True)

df_num.rename(columns={'Racial and ethnic inequality': 'topics_inequality'}, inplace=True)

df_num.rename(columns={'War/conflicts in Ukraine and Russia': 'topics_ukraine'}, inplace=True)

df_num.rename(columns={'War/conflicts in Palestine and Israel': 'topics_palestine'}, inplace=True)

df_num.rename(columns={'Fair elections, democracy': 'topics_democracy'}, inplace=True)

df_num.rename(columns={'Other': 'topics_other'}, inplace=True)

topics1 = ["Person of color", "Member of the LGBTQ+ community", "First-generation college student",
            "Disabled", "Non-traditional student", "None of the above"]

for topic1 in topics1:
    df_num[topic1] = df_num['identity'].apply(lambda x: 1 if topic1 in x else 0)

df_num.rename(columns={'Person of color': 'identity_poc'}, inplace=True)

df_num.rename(columns={'Member of the LGBTQ+ community': 'identity_lgbtq'}, inplace=True)

df_num.rename(columns={'First-generation college student': 'identity_firstgen'}, inplace=True)

df_num.rename(columns={'Disabled': 'identity_disabled'}, inplace=True)

df_num.rename(columns={'Non-traditional student': 'identity_nontraditional'}, inplace=True)

df_num.rename(columns={'None of the above': 'identity_na'}, inplace=True)

df_num

df_num.dtypes

"""# Data Counts"""

df_num.columns

"""## General Respondent Info"""

df_num['campus_affiliation'].value_counts()

df_num['gender'].value_counts()

df_num['identity_na'].value_counts()

df_num['identity_poc'].value_counts()

df_num['identity_lgbtq'].value_counts()

df_num['identity_firstgen'].value_counts()

"""## Statements"""

# I feel worried about the state of our nation.
df_num['scale_nation'].value_counts()

# President Biden made the right decision by dropping out of the race.
df_num['scale_biden'].value_counts()

# The Sept. 10 Presidential Debate changed my opinions on either candidate.
df_num['scale_debate'].value_counts()

# Who do you think won the Sept. 10 Presidential Debate?
df_num['debate_winner'].value_counts()

# How has the recent reporting on Lieutenant Governor Mark Robinsonâ€™s online
#presence changed your stance on him?
df_num['robinson_news'].value_counts()

"""## Voting Plans"""

df_num['registered_voter'].value_counts()

df_num['first_time_voter'].value_counts()

df_num['party_affiliation'].value_counts()

df_num['president_vote'].value_counts()

df_num['governor_vote'].value_counts()

"""## Important Topics"""

df_num['topics_abortion'].value_counts()

df_num['topics_climate'].value_counts()

df_num['topics_economy'].value_counts()

df_num['topics_healthcare'].value_counts()

df_num['topics_scotus'].value_counts()

df_num['topics_crime'].value_counts()

df_num['topics_foreignpolicy'].value_counts()

df_num['topics_immigration'].value_counts()

df_num['topics_guns'].value_counts()

df_num['topics_inequality'].value_counts()

df_num['topics_ukraine'].value_counts()

df_num['topics_palestine'].value_counts()

df_num['topics_democracy'].value_counts()

df_num['topics_other'].value_counts()

"""## Further Breakdown"""

# Out of all women (45), how many of them consider abortion important
df_num[df_num['gender'] == 'Woman']['topics_abortion'].value_counts()

# Out of all Independent/Unaffiliated students, who are they voting for?
df_num[df_num['party_affiliation'] == 'Independent/Unaffiliated']['president_vote'].value_counts()

df_num.to_csv('editedelectionresponses.csv')